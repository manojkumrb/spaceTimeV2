% comparing deterministinc and adaptive measurement
% reads the result from all possible determisnistic sequences and then
% finds the sequence with minimum rmse to compare with the adaptive
% measurements
% variable delta stores the best sequence from all possible cases
% mod for 504

close all;clear all;
run 'C:\Users\babu_m\Documents\GitHub\source\initFiles.m';
path(path,'M:\504 sim data');
load('504InnWokrig2batch45basis_1.0Tol_0.0W2.mat'); % contains structure seqPred %


%% Rmse diff AFTER EACH MEASUREMET AVERAGED FOR ALL PATTERNS

numberCompleteMeasure   =2;
maxSnap                 =9;
nPattern                =length(seqPred);
totalInstances          = nPattern-(numberCompleteMeasure);

regionsMes(maxSnap).Seq(1).Pattern(1).Dev=[];

%% rmse for a given sequence(j) averaged over all parts(variation pattern(i)), compared
%with average of rmse of adaptive measurements after same no of
%measurements for all parts(variation pattern)

for nMes=1:maxSnap
	fileName=sprintf('detAllSeq%dReg.mat',nMes);
	tempvar=load(fileName);
	regionsMes(nMes).Seq=tempvar.regionsMes.Seq;
	
	delta(nMes).Min=inf;
	delta(nMes).MinSeq=[];
	
	delta(nMes).Max=-inf;
	delta(nMes).MaxSeq=[];
	
	for j=1:length(regionsMes(nMes).Seq)
		rmseD=0;
		rmseA=0;
		
		allMesReg=regionsMes(nMes).Seq(j).Regions;
		nMesReg=length(allMesReg);
		
		for i=numberCompleteMeasure+1:nPattern % i for each part
			
			% adding Rmse
			rmseD=rmseD+regionsMes(nMes).Seq(j).Pattern(i).Rmse;
			rmseA=rmseA+seqPred(i).Snap(nMesReg).RmseT(nMesReg);
		end
		
		delta(nMes).Seq(j)=((rmseD-rmseA));
		
		if delta(nMes).Seq(j)<delta(nMes).Min
			delta(nMes).Min=delta(nMes).Seq(j);
			delta(nMes).RmseDetMin=rmseD;
			delta(nMes).RmseA=rmseA;
			delta(nMes).MinSeq=allMesReg;
			
		end
		if delta(nMes).Seq(j)>delta(nMes).Max
			delta(nMes).Max=delta(nMes).Seq(j);
			delta(nMes).RmseDetMax=rmseD;
			delta(nMes).RmseA=rmseA;
			delta(nMes).MaxSeq=allMesReg;
		end
	end
	
end

%% plotting
markers = {'o','s','d','^','v','x','+','*','.','>','<','p','h','o','s','d','^','v','x'};
cmapRmsePlot = cbrewer('qual','Set1',5);

for i=1:maxSnap
	rmseAvgDetMin(i)=delta(i).RmseDetMin;
	rmseAvgDetMax(i)=delta(i).RmseDetMax;
	rmseAvgAdap(i)=delta(i).RmseA;
end

% standard error claculation
rmseSE=zeros(totalInstances,maxSnap);
count=1;
for i=numberCompleteMeasure+1:nPattern
	rmseSE(count,:)=seqPred(i).Snap(maxSnap).RmseT;
	count=count+1;
end
stdError=std(rmseSE)./sqrt(size(rmseSE,1));
stdError=stdError.*1.96;
% average
rmseAvgDetMin=rmseAvgDetMin./totalInstances;
rmseAvgAdap=rmseAvgAdap./totalInstances;
rmseAvgDetMax=rmseAvgDetMax./totalInstances;

% plotting standard error
upperStdErr=rmseAvgAdap+stdError;
lowerStdErr=rmseAvgAdap-stdError;
fillRmseYAdap=[upperStdErr,fliplr(lowerStdErr)]';

fig=figure;

fillX=[1:length(rmseAvgDetMax),fliplr(1:length(rmseAvgDetMin))]';
fillYDet=[rmseAvgDetMax,fliplr(rmseAvgDetMin)]';



patchHandle=patch(fillX,fillYDet,[254,178,76]./256);
patchHandle.FaceAlpha=0.1;                % lower alpha more transparent
patchHandle.EdgeColor=[255,255,255]./256; % now white
hold all
patchHandle=patch(fillX,fillRmseYAdap,[224,243,219]./256);
patchHandle.FaceAlpha=0.8;
patchHandle.EdgeColor=[255,255,255]./256;


% Plotting means, max and min
hold all
linesComp=plot(1:length(rmseAvgDetMin),rmseAvgDetMin,...
	1:length(rmseAvgDetMax),rmseAvgDetMax,...
	1:length(rmseAvgAdap),rmseAvgAdap);

for k=1:length(linesComp)
	
	linesComp(k).LineWidth=1.5;
	linesComp(k).Color=cmapRmsePlot(k,:);
	linesComp(k).Marker=markers{k};
	linesComp(k).MarkerFaceColor='none';
	linesComp(k).MarkerEdgeColor=cmapRmsePlot(k,:);
	
end

fig=changeAxesLooks(fig,'',...
	'Number of measurements','RMSE in mm');


legendflex(linesComp, {'Best fixed measurement sequence','Worst fixed measurement sequence','Dynamic measurement sequence'}, ...
	'anchor', {'ne','ne'}, ...
	'buffer', [0 0], ...
	'nrow',   3,...
	'fontsize',12, ...
	'xscale', 0.66, ...
	'box','on');

export_fig('detAdpComp504','-png','-r400','-transparent');


%% for t test calc MAE

% mae for a given sequence(j) averaged over all parts(variation pattern(i)), compared
%with average of rmse of adaptive measurements after same no of
%measurements for all parts(variation pattern)

for nMes=1:maxSnap
	fileName=sprintf('detAllSeq%dReg.mat',nMes);
	tempvar=load(fileName);
	regionsMes(nMes).Seq=tempvar.regionsMes.Seq;
	
	delta(nMes).Min=inf;
	delta(nMes).MinSeq=[];
	
	delta(nMes).Max=-inf;
	delta(nMes).MaxSeq=[];
	
	for j=1:length(regionsMes(nMes).Seq)
		madD	=zeros(1,nPattern);
		madA	=zeros(1,nPattern);
		
		allMesReg=regionsMes(nMes).Seq(j).Regions;
		nMesReg=length(allMesReg);
		
		for i=numberCompleteMeasure+1:nPattern % i for each part
			
			% adding Rmse
			madD(i)		=regionsMes(nMes).Seq(j).Pattern(i).Madt;
			madA(i)		=seqPred(i).Snap(nMesReg).MadT;
		end
		
		delta(nMes).Seq(j)=((mean(madD)-mean(madA)));
		
		if delta(nMes).Seq(j)<delta(nMes).Min
			delta(nMes).Min=delta(nMes).Seq(j);
			delta(nMes).madDetMin=madD;
			delta(nMes).madA=madA;
			delta(nMes).MinSeq=allMesReg;
			
		end
		if delta(nMes).Seq(j)>delta(nMes).Max
			delta(nMes).Max=delta(nMes).Seq(j);
			delta(nMes).madDetMax=madD;
			delta(nMes).madA=madA;
			delta(nMes).MaxSeq=allMesReg;
		end
	end
	
end
%% %% plotting MAE after t test modificaitons
markers = {'o','s','d','^','v','x','+','*','.','>','<','p','h','o','s','d','^','v','x'};
cmapRmsePlot = cbrewer('qual','Set1',5);

for i=1:maxSnap
	madDetMin(:,i)	=delta(i).madDetMin;
	madDetMax(:,i)	=delta(i).madDetMax;
	madAdap(:,i)	=delta(i).madA;
end

madDetMin(1:numberCompleteMeasure,:)	=[];
madDetMax(1:numberCompleteMeasure,:)	=[];
madAdap(1:numberCompleteMeasure,:)	=[];


% standard error claculation
madSE=zeros(totalInstances,maxSnap);
count=1;
for i=numberCompleteMeasure+1:nPattern
	madSE(count,:)=seqPred(i).Snap(maxSnap).MadT;
	count=count+1;
end
stdError=std(madSE)./sqrt(size(madSE,1));
stdError=stdError.*1.96;
% average
madAvgDetMin	=mean(madDetMin);
madAvgAdap		=mean(madAdap);
madAvgDetMax	=mean(madDetMax);

% plotting standard error
upperStdErr=madAvgAdap+stdError;
lowerStdErr=madAvgAdap-stdError;
fillRmseYAdap=[upperStdErr,fliplr(lowerStdErr)]';

fig=figure;

fillX=[1:length(madAvgDetMax),fliplr(1:length(madAvgDetMin))]';
fillYDet=[madAvgDetMax,fliplr(madAvgDetMin)]';



patchHandle=patch(fillX,fillYDet,[254,178,76]./256);
patchHandle.FaceAlpha=0.1;                % lower alpha more transparent
patchHandle.EdgeColor=[255,255,255]./256; % now white
hold all
patchHandle=patch(fillX,fillRmseYAdap,[224,243,219]./256);
patchHandle.FaceAlpha=0.8;
patchHandle.EdgeColor=[255,255,255]./256;


% Plotting means, max and min
hold all
linesComp=plot(1:length(madAvgDetMin),madAvgDetMin,...
	1:length(madAvgDetMax),madAvgDetMax,...
	1:length(madAvgAdap),madAvgAdap);

for k=1:length(linesComp)
	
	linesComp(k).LineWidth=1.5;
	linesComp(k).Color=cmapRmsePlot(k,:);
	linesComp(k).Marker=markers{k};
	linesComp(k).MarkerFaceColor='none';
	linesComp(k).MarkerEdgeColor=cmapRmsePlot(k,:);
	
end

fig=changeAxesLooks(fig,'',...
	'Number of measurements','Mean Absolute Error in mm');


legendflex(linesComp, {'Best fixed measurement sequence','Worst fixed measurement sequence','Dynamic measurement sequence'}, ...
	'anchor', {'ne','ne'}, ...
	'buffer', [0 0], ...
	'nrow',   3,...
	'fontsize',12, ...
	'xscale', 0.66, ...
	'box','on');

export_fig('detAdpCompMAE504','-png','-r400','-transparent');

for i=1:maxSnap
	
	[h(i),p(i)]		=ttest2(madAdap(:,i)',madDetMin(:,i));
	
end

difMad		=madAdap- madDetMin;
meanDiff	=mean(difMad);